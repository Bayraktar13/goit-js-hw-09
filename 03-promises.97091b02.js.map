{"mappings":"CAiFA,WAqBuB,SAASA,EAAcC,GACrB,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,MAAEL,IAEVM,EAAO,C,MAAEN,GAAQ,GAElBA,EAAM,G,CA9BnBQ,SAASC,cAAc,SAkCVC,iBAAiB,UAhCtBC,IACrBA,EAAMC,iBAEN,MAAQZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,OAAOC,SAE7C,IAAK,IAAIC,EAAI,EAAGA,GAAKC,OAAOJ,EAAOK,OAAQF,IAAK,CACzBC,OAAON,EAAMO,OAAmBD,OAAOL,EAAKM,OAEjErB,EAAcmB,GACXG,MAAK,EAACrB,MAAEA,MACPsB,QAAQC,IAAI,2BAACvB,MAAA,IAEdwB,OAAM,EAACxB,MAAEA,MACRsB,QAAQC,IAAI,2BAACvB,MAAA,G,KAsBFyB","sources":["src/js/03-promises.js"],"sourcesContent":["// function secondHomeWork() {\n//   const formEl = document.querySelector('.form');\n\n//   const onFormElSubmit = event => {\n//     event.preventDefault();\n\n//     const { delay, step, amount } = event.target.elements;\n\n//     for (let i = 1; i <= Number(amount.value); i++) {\n//       const position = i;\n//       const currentDelay = Number(delay.value) + (i - 1) * Number(step.value);\n\n//       createPromise(position, currentDelay)\n//         .then(({ position, delay }) => {\n//           console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//         })\n//         .catch(({ position, delay }) => {\n//           console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//         });\n//     }\n//   };\n\n//   function createPromise(position, delay) {\n//     const shouldResolve = Math.random() > 0.3;\n\n//     return new Promise((resolve, reject) => {\n//       setTimeout(() => {\n//         if (shouldResolve) {\n//           resolve({ position, delay });\n//         } else {\n//           reject({ position, delay });\n//         }\n//       }, delay);\n//     });\n//   }\n\n//   formEl.addEventListener('submit', onFormElSubmit);\n// }\n\n// secondHomeWork();\n\n// function secondHomeWork() {\n//   const formEl = document.querySelector('.form');\n\n//   const onFormElSubmit = event => {\n//     event.preventDefault();\n\n//     const { delay, step, amount } = event.target.elements;\n\n//     for (let i = 1; i <= Number(amount.value); i++) {\n//       const currentDelay = Number(delay.value) + (i - 1) * Number(step.value);\n\n//       createPromise(i, currentDelay)\n//         .then(({ position, delay }) => {\n//           console.log(`✅ Обещание ${position} выполнено за ${delay}мс`);\n//         })\n//         .catch(({ position, delay }) => {\n//           console.log(`❌ Обещание ${position} отклонено за ${delay}мс`);\n//         });\n//     }\n//   };\n\n//   function createPromise(position, delay) {\n//     const shouldResolve = Math.random() > 0.3;\n\n//     return new Promise((resolve, reject) => {\n//       setTimeout(() => {\n//         if (shouldResolve) {\n//           resolve({ position, delay });\n//         } else {\n//           reject({ position, delay });\n//         }\n//       }, delay);\n//     });\n//   }\n\n//   formEl.addEventListener('submit', onFormElSubmit);\n// }\n\n// secondHomeWork();\n\nfunction secondHomeWork() {\n  const formEl = document.querySelector('.form');\n\n  const onFormElSubmit = event => {\n    event.preventDefault();\n\n    const { delay, step, amount } = event.target.elements;\n\n    for (let i = 1; i <= Number(amount.value); i++) {\n      const currentDelay = Number(delay.value) + (i - 1) * Number(step.value);\n\n      createPromise(i, currentDelay)\n        .then(({ delay }) => {\n          console.log(`✅ Обещание выполнено за ${delay}мс`);\n        })\n        .catch(({ delay }) => {\n          console.log(`❌ Обещание отклонено за ${delay}мс`);\n        });\n    }\n  };\n\n  function createPromise(delay) {\n    const shouldResolve = Math.random() > 0.3;\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ delay });\n        } else {\n          reject({ delay });\n        }\n      }, delay);\n    });\n  }\n\n  formEl.addEventListener('submit', onFormElSubmit);\n}\n\nsecondHomeWork();\n"],"names":["createPromise","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","step","amount","target","elements","i","Number","value","then","console","log","catch","$47d4ff9957288465$var$secondHomeWork"],"version":3,"file":"03-promises.97091b02.js.map"}